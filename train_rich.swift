#!/usr/bin/env swift

import Foundation
import CreateML
import TabularData

print("üöÄ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –†–û–ó–®–ò–†–ï–ù–û–á ML –º–æ–¥–µ–ª—ñ")
print("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n")

let currentDirectory = FileManager.default.currentDirectoryPath
let csvPath = URL(fileURLWithPath: "\(currentDirectory)/transaction_training_data_rich.csv")

print("üìÇ CSV: \(csvPath.path)\n")

do {
    guard FileManager.default.fileExists(atPath: csvPath.path) else {
        print("‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        exit(1)
    }

    print("üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö...")
    let dataFrame = try DataFrame(contentsOfCSVFile: csvPath)

    print("‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ \(dataFrame.rows.count) –ø—Ä–∏–∫–ª–∞–¥—ñ–≤")
    print("üìä –ö–æ–ª–æ–Ω–∫–∏: \(dataFrame.columns.map { $0.name })\n")

    // –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
    var categoryCount: [String: Int] = [:]
    var expenseCount = 0
    var incomeCount = 0

    for row in dataFrame.rows {
        if let label = row["label", String.self] {
            categoryCount[label, default: 0] += 1
        }
        if let text = row["text", String.self] {
            if text.hasPrefix("expense:") {
                expenseCount += 1
            } else if text.hasPrefix("income:") {
                incomeCount += 1
            }
        }
    }

    print("üìä –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ —Ç–∏–ø–∞—Ö:")
    print("  ‚Ä¢ expense: \(expenseCount)")
    print("  ‚Ä¢ income: \(incomeCount)")

    print("\nüìä –†–æ–∑–ø–æ–¥—ñ–ª –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:")
    for (category, count) in categoryCount.sorted(by: { $0.value > $1.value }) {
        print("  ‚Ä¢ \(category): \(count)")
    }

    print("\nüöÄ –¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è Text Classifier...")

    let startTime = Date()

    let classifier = try MLTextClassifier(
        trainingData: dataFrame,
        textColumn: "text",
        labelColumn: "label"
    )

    let time = Date().timeIntervalSince(startTime)
    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ \(String(format: "%.2f", time)) —Å–µ–∫\n")

    // –ú–µ—Ç—Ä–∏–∫–∏
    print("üìà –ú–µ—Ç—Ä–∏–∫–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è:")
    print("  –¢–æ—á–Ω—ñ—Å—Ç—å: \(String(format: "%.2f%%", (1.0 - classifier.trainingMetrics.classificationError) * 100))")

    print("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó:")
    print("  –¢–æ—á–Ω—ñ—Å—Ç—å: \(String(format: "%.2f%%", (1.0 - classifier.validationMetrics.classificationError) * 100))")

    // –¢–ï–°–¢–ò
    print("\nüß™ –ö–û–ú–ü–õ–ï–ö–°–ù–Ü –¢–ï–°–¢–ò:")
    print("‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")

    let testCases = [
        // –á–∂–∞
        ("expense: –ü—Ä–æ–¥—É–∫—Ç–∏ –≤ –ê–¢–ë", "–á–∂–∞"),
        ("expense: –ü—ñ—Ü–∞", "–á–∂–∞"),
        ("expense: –û–±—ñ–¥ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ñ", "–á–∂–∞"),
        ("expense: McDonald's", "–á–∂–∞"),

        // –ü–æ–∫—É–ø–∫–∏
        ("expense: –¢–µ–ª–µ—Ñ–æ–Ω", "–ü–æ–∫—É–ø–∫–∏"),
        ("expense: –û–¥—è–≥ –≤ Zara", "–ü–æ–∫—É–ø–∫–∏"),
        ("expense: –ö—Ä–æ—Å—ñ–≤–∫–∏ Nike", "–ü–æ–∫—É–ø–∫–∏"),

        // –ó–¥–æ—Ä–æ–≤'—è
        ("expense: –õ—ñ–∫–∏ –≤ –∞–ø—Ç–µ—Ü—ñ", "–ó–¥–æ—Ä–æ–≤'—è"),
        ("expense: –õ—ñ–∫–∞—Ä", "–ó–¥–æ—Ä–æ–≤'—è"),
        ("expense: –°—Ç–æ–º–∞—Ç–æ–ª–æ–≥", "–ó–¥–æ—Ä–æ–≤'—è"),

        // –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ
        ("expense: –°–≤—ñ—Ç–ª–æ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ"),
        ("expense: –Ü–Ω—Ç–µ—Ä–Ω–µ—Ç –ö–∏—ó–≤—Å—Ç–∞—Ä", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ"),
        ("expense: –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ"),

        // –û—Å–≤—ñ—Ç–∞
        ("expense: –ö—É—Ä—Å–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó", "–û—Å–≤—ñ—Ç–∞"),
        ("expense: –ö–Ω–∏–≥–∏", "–û—Å–≤—ñ—Ç–∞"),
        ("expense: –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–û—Å–≤—ñ—Ç–∞"),

        // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        ("expense: –¢–∞–∫—Å—ñ Uber", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
        ("expense: –ë–µ–Ω–∑–∏–Ω", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
        ("expense: –ú–µ—Ç—Ä–æ", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),

        // –†–æ–∑–≤–∞–≥–∏
        ("expense: –ö—ñ–Ω–æ", "–†–æ–∑–≤–∞–≥–∏"),
        ("expense: PlayStation Plus", "–†–æ–∑–≤–∞–≥–∏"),
        ("expense: Steam", "–†–æ–∑–≤–∞–≥–∏"),

        // Income
        ("income: –ó–∞—Ä–ø–ª–∞—Ç–∞", "–ó–∞—Ä–ø–ª–∞—Ç–∞"),
        ("income: –§—Ä—ñ–ª–∞–Ω—Å –ø—Ä–æ–µ–∫—Ç", "–§—Ä—ñ–ª–∞–Ω—Å"),
        ("income: –î–∏–≤—ñ–¥–µ–Ω–¥–∏", "–Ü–Ω–≤–µ—Å—Ç–∏—Ü—ñ—ó"),
        ("income: –ü–æ–¥–∞—Ä—É–Ω–æ–∫", "–ü–æ–¥–∞—Ä—É–Ω–æ–∫"),
        ("income: –ë–æ–Ω—É—Å", "–ë–æ–Ω—É—Å"),
    ]

    var correct = 0
    var categoryResults: [String: (correct: Int, total: Int)] = [:]

    for (testText, expected) in testCases {
        let prediction = try classifier.prediction(from: testText)
        let isCorrect = prediction == expected

        if isCorrect {
            correct += 1
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        if categoryResults[expected] == nil {
            categoryResults[expected] = (correct: 0, total: 0)
        }
        categoryResults[expected]?.total += 1
        if isCorrect {
            categoryResults[expected]?.correct += 1
        }

        let icon = isCorrect ? "‚úÖ" : "‚ùå"
        let shortText = testText.replacingOccurrences(of: "expense: ", with: "").replacingOccurrences(of: "income: ", with: "")
        print("\(icon) '\(shortText)' ‚Üí \(prediction) (–æ—á—ñ–∫—É—î—Ç—å—Å—è: \(expected))")
    }

    let accuracy = Double(correct) / Double(testCases.count) * 100
    print("\nüìä –ó–∞–≥–∞–ª—å–Ω–∞ —Ç–æ—á–Ω—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤: \(String(format: "%.1f%%", accuracy)) (\(correct)/\(testCases.count))")

    print("\nüìä –¢–æ—á–Ω—ñ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:")
    for (category, stats) in categoryResults.sorted(by: { $0.key < $1.key }) {
        let catAccuracy = Double(stats.correct) / Double(stats.total) * 100
        print("  ‚Ä¢ \(category): \(String(format: "%.0f%%", catAccuracy)) (\(stats.correct)/\(stats.total))")
    }

    print("\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ
    let modelPath = URL(fileURLWithPath: "\(currentDirectory)/TransactionCategoryClassifier.mlmodel")
    print("üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ...")
    try classifier.write(to: modelPath)

    let attrs = try FileManager.default.attributesOfItem(atPath: modelPath.path)
    if let size = attrs[.size] as? Int64 {
        print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: \(String(format: "%.1f", Double(size) / 1024)) KB")
    }

    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")
    print("\nüìù –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("   1. cp TransactionCategoryClassifier.mlmodel ../BudgetAI/ML/")
    print("   2. Clean Build –≤ Xcode (Cmd + Shift + K)")
    print("   3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —ñ —Ç–µ—Å—Ç—É–π—Ç–µ!")

} catch {
    print("\n‚ùå –ü–æ–º–∏–ª–∫–∞: \(error)")
    exit(1)
}
