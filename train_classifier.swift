#!/usr/bin/env swift

import Foundation
import CreateML
import TabularData

print("üöÄ Starting transaction classifier training...")

// –®–ª—è—Ö –¥–æ CSV —Ñ–∞–π–ª—É –∑ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
let currentDirectory = FileManager.default.currentDirectoryPath
let dataURL = URL(fileURLWithPath: currentDirectory).appendingPathComponent("transaction_classifier_training.csv")

guard FileManager.default.fileExists(atPath: dataURL.path) else {
    print("‚ùå Error: Training data file not found at \(dataURL.path)")
    print("Please run 'swift generate_classifier_data.swift' first.")
    exit(1)
}

do {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
    print("üìä Loading training data from: \(dataURL.path)")
    let data = try MLDataTable(contentsOf: dataURL)

    print("‚úÖ Data loaded successfully!")
    print("   Rows: \(data.rows.count)")
    print("   Columns: \(data.columnNames)")

    // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ç—Ä–µ–Ω—É–≤–∞–ª—å–Ω—É —Ç–∞ —Ç–µ—Å—Ç–æ–≤—É –≤–∏–±—ñ—Ä–∫–∏ (80/20)
    let (trainingData, testingData) = data.randomSplit(by: 0.8, seed: 42)

    print("\nüìà Training set: \(trainingData.rows.count) rows")
    print("üß™ Testing set: \(testingData.rows.count) rows")

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ —Ç—Ä–µ–Ω—É—î–º–æ Text Classifier –º–æ–¥–µ–ª—å
    print("\nüèãÔ∏è Training Text Classifier model...")
    print("   Target: label")
    print("   Feature: text")
    print("   Algorithm: Transfer Learning (Natural Language)")

    let classifier = try MLTextClassifier(
        trainingData: trainingData,
        textColumn: "text",
        labelColumn: "label"
    )

    print("\n‚úÖ Model trained successfully!")

    // –û—Ü—ñ–Ω—é—î–º–æ –º–æ–¥–µ–ª—å –Ω–∞ —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    print("\nüìä Evaluating model on test data...")
    let evaluationMetrics = classifier.evaluation(on: testingData, textColumn: "text", labelColumn: "label")

    print("\nüìà Model Performance Metrics:")
    print("   Validation Accuracy: \(String(format: "%.2f%%", evaluationMetrics.classificationError * 100))")

    // –¢–µ—Å—Ç—É—î–º–æ –º–æ–¥–µ–ª—å –Ω–∞ –ø—Ä–∏–∫–ª–∞–¥–∞—Ö
    print("\nüß™ Testing predictions:")
    let testExamples = [
        ("expense: –ê–¢–ë —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç", "–á–∂–∞"),
        ("expense: Uber –ø–æ—ó–∑–¥–∫–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
        ("expense: Netflix –ø—ñ–¥–ø–∏—Å–∫–∞", "–†–æ–∑–≤–∞–≥–∏"),
        ("expense: –ê–ø—Ç–µ–∫–∞ –ª—ñ–∫–∏", "–ó–¥–æ—Ä–æ–≤'—è"),
        ("expense: Zara –æ–¥—è–≥", "–ü–æ–∫—É–ø–∫–∏"),
        ("expense: –ö–∏—ó–≤–µ–Ω–µ—Ä–≥–æ —Å–≤—ñ—Ç–ª–æ", "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ"),
        ("expense: Coursera –∫—É—Ä—Å", "–û—Å–≤—ñ—Ç–∞"),
        ("expense: –ü–æ–¥–∞—Ä—É–Ω–æ–∫", "–Ü–Ω—à–µ")
    ]

    for (text, expectedCategory) in testExamples {
        let prediction = try classifier.prediction(from: text)
        let isCorrect = prediction == expectedCategory ? "‚úÖ" : "‚ùå"
        print("   \(isCorrect) \"\(text)\" ‚Üí \(prediction) (expected: \(expectedCategory))")
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ –¥–ª—è –º–æ–¥–µ–ª—ñ
    let metadata = MLModelMetadata(
        author: "BudgetAI",
        shortDescription: "–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –æ–ø–∏—Å—É",
        version: "2.0"
    )

    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –º–æ–¥–µ–ª—å
    let modelURL = URL(fileURLWithPath: currentDirectory).appendingPathComponent("TransactionCategoryClassifier.mlmodel")

    print("\nüíæ Saving model to: \(modelURL.path)")
    try classifier.write(to: modelURL, metadata: metadata)

    print("\n‚úÖ Model saved successfully!")
    print("\nüéâ Training complete!")
    print("\nüìù Next steps:")
    print("   1. Copy TransactionCategoryClassifier.mlmodel to BudgetAI/ML/ directory")
    print("   2. Replace the old model in Xcode project")
    print("   3. Rebuild the project")
    print("   4. Test the app with categories: –á–∂–∞, –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –†–æ–∑–≤–∞–≥–∏, –ó–¥–æ—Ä–æ–≤'—è, –ü–æ–∫—É–ø–∫–∏, –ö–æ–º—É–Ω–∞–ª—å–Ω—ñ, –û—Å–≤—ñ—Ç–∞, –Ü–Ω—à–µ")

} catch {
    print("‚ùå Error during training: \(error.localizedDescription)")
    print("   \(error)")
    exit(1)
}
