#!/usr/bin/env swift

import Foundation
import CoreML

print("üß™ Testing ExpenseForecastModel...")

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å
let modelURL = URL(fileURLWithPath: FileManager.default.currentDirectoryPath)
    .appendingPathComponent("ExpenseForecastModel.mlmodel")

guard FileManager.default.fileExists(atPath: modelURL.path) else {
    print("‚ùå Model file not found at: \(modelURL.path)")
    exit(1)
}

print("‚úÖ Model file found")

// –ö–æ–º–ø—ñ–ª—é—î–º–æ –º–æ–¥–µ–ª—å
do {
    let compiledURL = try MLModel.compileModel(at: modelURL)
    print("‚úÖ Model compiled successfully at: \(compiledURL.path)")

    let model = try MLModel(contentsOf: compiledURL)
    print("‚úÖ Model loaded successfully")

    // –û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å –º–æ–¥–µ–ª—ñ
    let description = model.modelDescription

    print("\nüìä Model Description:")
    print("   Inputs:")
    for input in description.inputDescriptionsByName {
        print("      - \(input.key): \(input.value.type)")
    }

    print("   Outputs:")
    for output in description.outputDescriptionsByName {
        print("      - \(output.key): \(output.value.type)")
    }

    print("\n‚úÖ Model is ready to use in your iOS app!")
    print("\nüìù Next steps:")
    print("   1. Open BudgetAI.xcodeproj in Xcode")
    print("   2. Drag ExpenseForecastModel.mlmodel into the project navigator")
    print("   3. Make sure it's added to the BudgetAI target")
    print("   4. Build and run the project")

} catch {
    print("‚ùå Error: \(error.localizedDescription)")
    exit(1)
}
